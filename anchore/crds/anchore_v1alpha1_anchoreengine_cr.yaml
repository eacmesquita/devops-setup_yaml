apiVersion: anchore.com/v1alpha1
kind: AnchoreEngine
metadata:
  name: anchore-engine
  labels:
    app.kubernetes.io/managed-by: helm
spec:
  anchoreAnalyzer:
    affinity: {}
    annotations: {}
    concurrentTasksPerWorker: 1
    configFile:
      retrieve_files:
        file_list:
          - /etc/passwd
      secret_search:
        match_params:
          - MAXFILESIZE=10000
          - STOREONMATCH=n
        regexp_match:
          - >-
            AWS_ACCESS_KEY=(?i).*aws_access_key_id( *=+
            *).*(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9]).*
          - >-
            AWS_SECRET_KEY=(?i).*aws_secret_access_key( *=+
            *).*(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=]).*
          - PRIV_KEY=(?i)-+BEGIN(.*)PRIVATE KEY-+
          - 'DOCKER_AUTH=(?i).*"auth": *".+"'
          - >-
            API_KEY=(?i).*api(-|_)key( *=+
            *).*(?<![A-Z0-9])[A-Z0-9]{20,60}(?![A-Z0-9]).*
    containerPort: 8084
    cycleTimers:
      image_analyzer: 5
    enableHints: false
    extraEnv: []
    labels: {}
    layerCacheMaxGigabytes: 0
    nodeSelector: {}
    replicaCount: 1
    tolerations: []
  anchoreApi:
    affinity: {}
    annotations: {}
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      label: {}
      port: 8228
      type: ClusterIP
    tolerations: []
  anchoreCatalog:
    affinity: {}
    annotations: {}
    archive:
      compression:
        enabled: true
        min_size_kbytes: 100
      storage_driver:
        config: {}
        name: db
    cycleTimers:
      analyzer_queue: 1
      image_watcher: 3600
      notifications: 30
      policy_eval: 3600
      repo_watcher: 60
      service_watcher: 15
      vulnerability_scan: 14400
    events:
      notification:
        enabled: false
        level:
          - error
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      labels: {}
      port: 8082
      type: ClusterIP
    tolerations: []
  anchoreGlobal:
    allowECRUseIAMRole: false
    certStoreSecretName: null
    cleanupImages: true
    dbConfig:
      connectionPoolMaxOverflow: 100
      connectionPoolSize: 30
      ssl: false
      sslMode: verify-full
      sslRootCertName: null
      timeout: 120
    defaultAdminEmail: example@email.com
    defaultAdminPassword: foobar
    enableMetrics: false
    existingSecret: null
    extraEnv: []
    hashedPasswords: false
    image: 'docker.io/anchore/anchore-engine:v0.8.0'
    imageAnalyzeTimeoutSeconds: 36000
    imagePullPolicy: IfNotPresent
    imagePullSecretName: null
    internalServicesSsl:
      certSecretCertName: null
      certSecretKeyName: null
      enabled: false
      verifyCerts: false
    labels: {}
    logLevel: INFO
    metricsAuthDisabled: false
    oauthEnabled: false
    oauthTokenExpirationSeconds: 3600
    openShiftDeployment: true
    saml:
      privateKeyName: null
      publicKeyName: null
      secret: null
    scratchVolume:
      details:
        emptyDir: {}
      mountPath: /analysis_scratch
    serviceDir: /anchore_service
    webhooks:
      general: {}
      ssl_verify: true
      webhook_pass: null
      webhook_user: null
    webhooksEnabled: false
  anchorePolicyEngine:
    affinity: {}
    annotations: {}
    cycleTimers:
      feed_sync: 14400
      feed_sync_checker: 3600
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      labels: {}
      port: 8087
      type: ClusterIP
    tolerations: []
  anchoreSimpleQueue:
    affinity: {}
    annotations: {}
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      labels: {}
      port: 8083
      type: ClusterIP
    tolerations: []
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
    apiPath: /v1/
    enabled: false
    labels: {}
    tls: []
    uiPath: /
  postgresql:
    externalEndpoint: null
    extraEnv:
      - name: POSTGRESQL_USER
        value: anchoreengine
      - name: POSTGRESQL_PASSWORD
        value: 'anchore-postgres,123'
      - name: POSTGRESQL_DATABASE
        value: anchore
      - name: PGUSER
        value: postgres
      - name: LD_LIBRARY_PATH
        value: /opt/rh/rh-postgresql96/root/usr/lib64
      - name: PATH
        value: >-
          /opt/rh/rh-postgresql96/root/usr/bin:/opt/app-root/src/bin:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    image: registry.access.redhat.com/rhscl/postgresql-96-rhel7
    imageTag: latest
    persistence:
      resourcePolicy: nil
      size: 20Gi
    postgresDatabase: anchore
    postgresPassword: 'anchore-postgres,123'
    postgresUser: anchoreengine

